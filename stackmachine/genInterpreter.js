var fs = require('fs');
var ops = fs
  .readFileSync('ops.txt', 'utf-8')
  .split(/#/)
  .slice(1)
  .map(function(s) {
    var s = s.split('\n');
    var name = s[0]
    var code = s
      .slice(1, -1)
      .map(s => "        " + s)
      .join('\n');
    return {name,code}
  });

if(ops.length > 256) {
  throw "cannot handle more than 256 ops yet";
}

var hFile = `/*
 * AUTOGENERATED FILE
 * from genInterpreter.js
 * DO NOT EDIT 
 */
#ifndef __OPS_H__
#define __OPS_H__\n\n`
var cFile = `/*
 * AUTOGENERATED FILE
 * from genInterpreter.js
 * DO NOT EDIT
 */
word_t u_run(uint8_t *ip) {
  for(;;) {
    ensure_stack_space();
    switch(*ip++) {`;
var opNames = [];

for(var i = 0; i < ops.length; ++i) {
  var op = ops[i];
  hFile += `#define u_${op.name} ${i}\n`;
  opNames.push(`"${op.name}",`);
  cFile += `
      case u_${op.name}:
      {
${op.code}
      }
      break;`;
}

hFile += `
#endif /* __OPS_H__ */
`;
cFile += `
    }
  }
}
char *u_ops[] = {
  ${opNames.join("\n  ")}
  0
};\n `;
//console.log(cFile);
fs.writeFileSync("ops.h", hFile);
fs.writeFileSync("ops.impl", cFile);
