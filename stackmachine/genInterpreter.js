var fs = require('fs');
var ops = fs
  .readFileSync('ops.txt', 'utf-8')
  .split(/#/)
  .slice(1)
  .map(function(s) {
    var s = s.split('\n');
    var name = s[0]
    var code = s
      .slice(1, -1)
      .map(s => "        " + s)
      .join('\n');
    return {name,code}
  });

if(ops.length > 256) {
  throw "cannot handle more than 256 ops yet";
}

var hFile = `/*
 * AUTOGENERATED FILE
 * from genInterpreter.js
 * DO NOT EDIT 
 */
#include "vm.h"

#ifndef __INTERPRETER_H__
#define __INTERPRETER_H__
word_t u_run(uint8_t *ip);\n\n`
var cFile = `/*
 * AUTOGENERATED FILE
 * from genInterpreter.js
 * DO NOT EDIT
 */
#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>
#include <assert.h>
#include "interpreter.h"
#define sp u_stack

word_t u_run(uint8_t *ip) {
  word_t *h = u_heap;
  int i, j;
  for(;;) {
    assert(u_heap + u_heaptop < sp);
    switch(*ip++) {`;

for(var i = 0; i < ops.length; ++i) {
  var op = ops[i];
  hFile += `#define ${op.name} ${i}\n`;
  cFile += `
      case ${op.name}:
${op.code}
      break;`;
}

hFile += `
#endif /* __INTERPRETER_H__ */
`;
cFile += `
    }
  }
}`;
//console.log(cFile);
fs.writeFileSync("interpreter.h", hFile);
fs.writeFileSync("interpreter.c", cFile);
