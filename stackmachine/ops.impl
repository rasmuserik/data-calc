/*
 * AUTOGENERATED FILE
 * from genInterpreter.js
 * DO NOT EDIT
 */
word_t u_run(uint8_t *ip) {
  for(;;) {
    ensure_stack_space();
    switch(*ip++) {
      case u_QUIT:
      {
        return 0;
      }
      break;
      case u_NEW_STRING:
      {
        int i = word_to_int(*stack++);
        u_malloc(STRING_TYPE, 0, i);
        char *cp = (char *) (heap + word_to_chunk(*stack) + 3);
        for(int j = 0; j < i; ++j) {
          cp[j] = (char) word_to_int(stack[i - j]);
        }
        stack[i] = stack[0];
        stack += i;
      }
      break;
      case u_HELLO:
      {
        printf("Hello\n");
      }
      break;
      case u_PUSH_INT:
      {
        int i = *ip++;
        *--stack = int_to_word(i);
      }
      break;
      case u_LOG_INT:
      {
        printf("LOG_INT %d\n", word_to_int(*stack));
      }
      break;
      case u_POP:
      {
        stack++;
      }
      break;
      case u_DUP:
      {
        stack--;
        stack[0] = stack[1];
      }
      break;
      case u_ADD:
      {
        ++stack;
        *stack= int_to_word(word_to_int(stack[-1]) + word_to_int(stack[0]));
      }
      break;
      case u_PUSH_N:
      {
        int i = *ip++;
        ++stack;
        stack[i] = stack[-1];
      }
      break;
      case u_TUPLE:
      {
        int i = *ip++;
        u_malloc(1, i, 0);
        word_t w = word_to_chunk(*stack);
        for(int j = 0; j < i; ++j) {
           heap[w + 3 + j] = stack[j + 1];
        }
        stack[i] = stack[0];
        stack += i;
      }
      break;
    }
  }
}
char *u_ops[] = {
  "QUIT",
  "NEW_STRING",
  "HELLO",
  "PUSH_INT",
  "LOG_INT",
  "POP",
  "DUP",
  "ADD",
  "PUSH_N",
  "TUPLE",
  0
};
 