Embedded language:

cons-cells, 32 bit

13 bit words + 3 bit type

8 * 4 = 24K;

types:
1. list (cons-cell)
2. key/val (cons-cell)
3. atom
4. string
5. short-int
6. long-int
7. function


1. 2bit type + 2x 15bit words
2. 
3.
4.

The core language:
(def num 123);
(def str 'hello\ world!)
(def val0 (charCodeAt '0 0))
(defn fnname (args) expression)
(defk fnname (args) expression)


THEN
ELSE
ENDIF

fn-name (args) (expression...)
fn-name (args) (expression...)
fn-name (args) (expression...)
fn-name (args) (expression...)
fn-name (args) (expression...)
fn-name (args) (expression...)

# in_string empty? cond defn if

whitespace " \n\t"
numeric "1234567890"
val0 (.charCodeAt "0" 0)
tokenise (fk (cb cs k) (cps tokeniser cb (list) cs)


types
- Object - HAMT - string-keys
- Array - HAMT - integer-keys
- ATOM - false/true/null - string
- String - string
- Number - Float
- Number - 32bit int
- Compiled Function

types
- pair
- int
- heap-obj

FN:
HAMT-insert
HAMT
hash
key
value

- 14 bit int
- 14 bit pair = 16K pairs
- 14 bit heap-obj

types:
- 

(if
  expr
  {+ 1 3}
  {- 2 3})
(@ ...)
'foo\ bar
read_num 
(f (cb toks cs num kfn kadr)
  _ (+ c b)
  helo (* a c)
  _ )

(cps k)
  (cond 
    (in_string (first cs) numeric)
    (cps readnum cb toks (rest cs) (+ (* num 10) (- (first cs) val0)))
    (cps tokeniser cb (cons num toks) cs)))
tokeniser (fn [cb toks cs]

(defn tokenise [next]
(defn tokenise [cs token tokens]
  (if (empty? cs) 
    (cps next tokens)
    (let [c (first cs)]
      (cond
        (in_string c whitespace) (tokenise (rest cs) token tokens)
        (in_string c numeric) 
          (loop []))))))))
        

    
if compile
========
CALL
has-byte: c pos data k -- boolean
DUP 3 
DUP 3 ; pos data c pos data

NTH_BYTE ; c1 c2 pos data
EQ
THEN ; true pos data k
RET 4
ENDIF
INC
POP 1
TAIL_CALL n has-byte

next-token: pos s -- token pos s
NTH_BYTE ; c pos
DUP ; c c pos

